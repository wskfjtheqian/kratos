package main

import (
	"fmt"
	"google.golang.org/protobuf/reflect/protoreflect"
	"os"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const ()

var methodSets = make(map[string]int)

// generateFile generates a _http.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool, omitemptyPrefix string) *protogen.GeneratedFile {
	if len(file.Messages) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + ".pb.ts"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-ts-iface. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-ts-iface %s", release))
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()

	generateFileContent(gen, file, g, omitempty, omitemptyPrefix)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool, omitemptyPrefix string) {
	if len(file.Services) == 0 {
		return
	}
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	g.P()

	for _, message := range file.Messages {
		genMessages(gen, file, g, message, omitempty, omitemptyPrefix)
	}
}

func genMessages(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, message *protogen.Message, omitempty bool, omitemptyPrefix string) {
	for _, item := range message.Messages {
		genMessages(gen, file, g, item, omitempty, omitemptyPrefix)
	}

	if message.Desc.Options().(*descriptorpb.MessageOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &messagesDesc{
		MessageType: message.GoIdent.GoName,
		MessageName: string(message.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}
	for _, field := range message.Fields {
		sd.Fields = append(sd.Fields, buildFieldDesc(g, field))
	}

	g.P(sd.execute())
	g.P()
}

func buildFieldDesc(g *protogen.GeneratedFile, m *protogen.Field) *fieldDesc {
	comment := m.Comments.Leading.String() + m.Comments.Trailing.String()
	if comment != "" {
		comment = "// " + m.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
	}

	//line := fmt.Sprintf("%s %s `json:\"%s\"` %s", m.GoName, m.Desc.Kind(), m.Desc.JSONName(), trailingComment)

	_, _ = fmt.Fprintf(os.Stderr, "Messages : IsPacked="+strconv.FormatBool(m.Desc.IsPacked())+
		",IsList="+strconv.FormatBool(m.Desc.IsList())+
		",IsExtension="+strconv.FormatBool(m.Desc.IsExtension())+
		",IsPlaceholder="+strconv.FormatBool(m.Desc.IsPlaceholder())+
		",IsExtension="+strconv.FormatBool(m.Desc.IsExtension())+
		",HasDefault="+strconv.FormatBool(m.Desc.HasDefault())+
		",IsValid="+strconv.FormatBool(m.Desc.Kind().IsValid())+
		",IsValid="+strconv.FormatBool(m.Desc.Kind().IsValid())+
		",IsMap="+strconv.FormatBool(m.Desc.IsMap())+"\n")
	return &fieldDesc{
		Name:         m.GoName,
		OriginalName: string(m.Desc.Name()),
		Num:          methodSets[m.GoName],
		Comment:      comment,
		Kind:         "(" + getKind(g, m.Desc) + " | null)",
	}
}

func getKind(g *protogen.GeneratedFile, d protoreflect.FieldDescriptor) string {
	_, _ = fmt.Fprintf(os.Stderr, "Kind :"+d.Kind().GoString()+"\n")

	text := ""
	switch d.Kind() {
	case protoreflect.BoolKind:
		text = "bool"
	case protoreflect.EnumKind:
		text = string(d.Enum().Name())
	case protoreflect.Int32Kind:
		text = "number"
	case protoreflect.Sint32Kind:
		text = "number"
	case protoreflect.Uint32Kind:
		text = "number"
	case protoreflect.Int64Kind:
		text = "bigint"
	case protoreflect.Sint64Kind:
		text = "bigint"
	case protoreflect.Uint64Kind:
		text = "bigint"
	case protoreflect.Sfixed32Kind:
		text = "number"
	case protoreflect.Fixed32Kind:
		text = "number"
	case protoreflect.FloatKind:
		text = "number"
	case protoreflect.Sfixed64Kind:
		text = "number"
	case protoreflect.Fixed64Kind:
		text = "number"
	case protoreflect.DoubleKind:
		text = "number"
	case protoreflect.StringKind:
		text = "string"
	case protoreflect.BytesKind:
		text = "string"
	case protoreflect.MessageKind:
		if d.IsMap() {
			text = "Record<" + getKind(g, d.MapKey()) + "," + getKind(g, d.MapValue()) + ">"
		} else {
			text = string(d.Message().Parent().Name()) + "_" + string(d.Message().Name())
		}
	case protoreflect.GroupKind:
		text = "string"
	default:
		text = fmt.Sprintf("<unknown:%d>", d.Kind())
	}
	if d.IsList() {
		text += "[]"
	}
	return text
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

const deprecationComment = "// Deprecated: Do not use."
